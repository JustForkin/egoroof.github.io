{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///browser-id3-writer.min.js","webpack:///webpack/bootstrap b359d158eb5d1f4a81cb?eb85","webpack:///./src/browser-id3-writer.js?0c3f"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","uint32ToUint8Array","uint32","uint8array","eightBitMask","i","push","uint28ToUint7Array","uint28","uint7array","sevenBitMask","uint7ArrayToUint28","uint7Array","pow","artistsToStr","artists","join","genresToStr","genres","getTotalFrameSize","frames","size","forEach","frame","getNumericFrameSize","frameSize","headerSize","encodingSize","getStringFrameSize","bomSize","frameUtf16Size","getLyricsFrameSize","lyricsSize","languageSize","contentDescriptorSize","lyricsUtf16Size","getPictureFrameSize","mimeTypeSize","nullSize","pictureTypeSize","getBufferMimeType","buf","length","isLeTiff","isBeTiff","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Writer","buffer","constructor","ArrayBuffer","Error","firstThreeBytes","Uint8Array","isMp3File","isMp3Id3File","arrayBuffer","padding","url","value","name","integer","parseInt","toString","stringValue","mimeType","byteLength","lyrics","frameName","frameValue","Array","isArray","map","artist","artistsStr","_setStringFrame","genresStr","_setIntegerFrame","_setLyricsFrame","_setPictureFrame","headerLength","bufferLength","firstTenBytes","isId3tag","version","tagSize","slice","removeTag","offset","totalFrameSize","totalTagSize","bufferWriter","coder8","TextEncoder","coder16","writeBytes","set","encode","langEng","concat","Blob","type","URL","createObjectURL","getBlob","revokeObjectURL"],"mappings":"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","file":"browser-id3-writer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ID3Writer\"] = factory();\n\telse\n\t\troot[\"ID3Writer\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ID3Writer\"] = factory();\n\telse\n\t\troot[\"ID3Writer\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction uint32ToUint8Array(uint32) {\n\t    var uint8array = [];\n\t    var eightBitMask = (1 << 8) - 1;\n\t\n\t    for (var i = 24; i >= 0; i -= 8) {\n\t        uint8array.push(uint32 >>> i & eightBitMask);\n\t    }\n\t    return uint8array;\n\t}\n\t\n\tfunction uint28ToUint7Array(uint28) {\n\t    var uint7array = [];\n\t    var sevenBitMask = (1 << 7) - 1;\n\t\n\t    for (var i = 21; i >= 0; i -= 7) {\n\t        uint7array.push(uint28 >>> i & sevenBitMask);\n\t    }\n\t    return uint7array;\n\t}\n\t\n\tfunction uint7ArrayToUint28(uint7Array) {\n\t    var uint28 = 0;\n\t\n\t    for (var i = 0, pow = 21; pow >= 0; pow -= 7, i++) {\n\t        uint28 += uint7Array[i] << pow;\n\t    }\n\t    return uint28;\n\t}\n\t\n\tfunction artistsToStr(artists) {\n\t    return artists.join('/') || 'Unknown Artist';\n\t}\n\t\n\tfunction genresToStr(genres) {\n\t    // this delimiter works fine in Windows Explorer but nothing said about it in the spec\n\t    return genres.join(';');\n\t}\n\t\n\tfunction getTotalFrameSize(frames) {\n\t    var size = 0;\n\t\n\t    frames.forEach(function (frame) {\n\t        size += frame.size;\n\t    });\n\t    return size;\n\t}\n\t\n\tfunction getNumericFrameSize(frameSize) {\n\t    var headerSize = 10;\n\t    var encodingSize = 1;\n\t\n\t    return headerSize + encodingSize + frameSize;\n\t}\n\t\n\tfunction getStringFrameSize(frameSize) {\n\t    var headerSize = 10;\n\t    var encodingSize = 1;\n\t    var bomSize = 2;\n\t    var frameUtf16Size = frameSize * 2;\n\t\n\t    return headerSize + encodingSize + bomSize + frameUtf16Size;\n\t}\n\t\n\tfunction getLyricsFrameSize(lyricsSize) {\n\t    var headerSize = 10;\n\t    var encodingSize = 1;\n\t    var languageSize = 3;\n\t    var contentDescriptorSize = 2;\n\t    var lyricsUtf16Size = lyricsSize * 2;\n\t\n\t    return headerSize + encodingSize + languageSize + contentDescriptorSize + lyricsUtf16Size;\n\t}\n\t\n\tfunction getPictureFrameSize(frameSize, mimeTypeSize) {\n\t    var headerSize = 10;\n\t    var encodingSize = 1;\n\t    var nullSize = 1;\n\t    var pictureTypeSize = 1;\n\t\n\t    return headerSize + encodingSize + mimeTypeSize + nullSize + pictureTypeSize + nullSize + frameSize;\n\t}\n\t\n\tfunction getBufferMimeType(buf) {\n\t    // https://github.com/sindresorhus/file-type\n\t    if (!buf || !buf.length) {\n\t        return null;\n\t    }\n\t    if (buf[0] === 0xff && buf[1] === 0xd8 && buf[2] === 0xff) {\n\t        return 'image/jpeg';\n\t    }\n\t    if (buf[0] === 0x89 && buf[1] === 0x50 && buf[2] === 0x4e && buf[3] === 0x47) {\n\t        return 'image/png';\n\t    }\n\t    if (buf[0] === 0x47 && buf[1] === 0x49 && buf[2] === 0x46) {\n\t        return 'image/gif';\n\t    }\n\t    if (buf[8] === 0x57 && buf[9] === 0x45 && buf[10] === 0x42 && buf[11] === 0x50) {\n\t        return 'image/webp';\n\t    }\n\t    var isLeTiff = buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0x2a && buf[3] === 0;\n\t    var isBeTiff = buf[0] === 0x4d && buf[1] === 0x4d && buf[2] === 0 && buf[3] === 0x2a;\n\t\n\t    if (isLeTiff || isBeTiff) {\n\t        return 'image/tiff';\n\t    }\n\t    if (buf[0] === 0x42 && buf[1] === 0x4d) {\n\t        return 'image/bmp';\n\t    }\n\t    if (buf[0] === 0 && buf[1] === 0 && buf[2] === 1 && buf[3] === 0) {\n\t        return 'image/x-icon';\n\t    }\n\t    return null;\n\t}\n\t\n\tvar Writer = function () {\n\t    _createClass(Writer, [{\n\t        key: '_setIntegerFrame',\n\t        value: function _setIntegerFrame(name, value) {\n\t            var integer = parseInt(value, 10);\n\t\n\t            this.frames.push({\n\t                name: name,\n\t                value: integer,\n\t                size: getNumericFrameSize(integer.toString().length)\n\t            });\n\t        }\n\t    }, {\n\t        key: '_setStringFrame',\n\t        value: function _setStringFrame(name, value) {\n\t            var stringValue = value.toString();\n\t\n\t            this.frames.push({\n\t                name: name,\n\t                value: stringValue,\n\t                size: getStringFrameSize(stringValue.length)\n\t            });\n\t        }\n\t    }, {\n\t        key: '_setPictureFrame',\n\t        value: function _setPictureFrame(name, buffer) {\n\t            var mimeType = getBufferMimeType(new Uint8Array(buffer), 0, 12);\n\t\n\t            if (!mimeType) {\n\t                throw new Error('Unknown picture MIME type');\n\t            }\n\t            this.frames.push({\n\t                name: name,\n\t                value: buffer,\n\t                mimeType: mimeType,\n\t                size: getPictureFrameSize(buffer.byteLength, mimeType.length)\n\t            });\n\t        }\n\t    }, {\n\t        key: '_setLyricsFrame',\n\t        value: function _setLyricsFrame(name, lyrics) {\n\t            var stringValue = lyrics.toString();\n\t\n\t            this.frames.push({\n\t                name: name,\n\t                value: stringValue,\n\t                size: getLyricsFrameSize(stringValue.length)\n\t            });\n\t        }\n\t    }]);\n\t\n\t    function Writer(buffer) {\n\t        _classCallCheck(this, Writer);\n\t\n\t        if (!buffer || buffer.constructor !== ArrayBuffer) {\n\t            throw new Error('First argument should be an instance of ArrayBuffer');\n\t        }\n\t\n\t        var firstThreeBytes = new Uint8Array(buffer, 0, 3);\n\t        var isMp3File = firstThreeBytes[0] === 0xff && firstThreeBytes[1] === 0xfb;\n\t        var isMp3Id3File = firstThreeBytes[0] === 0x49 && firstThreeBytes[1] === 0x44 && firstThreeBytes[2] === 0x33;\n\t\n\t        if (!isMp3File && !isMp3Id3File) {\n\t            throw new Error('ArrayBuffer is not an mp3 file or it is corrupted');\n\t        }\n\t\n\t        this.arrayBuffer = buffer;\n\t        this.padding = 4096;\n\t        this.frames = [];\n\t        this.url = '';\n\t    }\n\t\n\t    _createClass(Writer, [{\n\t        key: 'setFrame',\n\t        value: function setFrame(frameName, frameValue) {\n\t            switch (frameName) {\n\t                case 'TPE1': // song artists\n\t                case 'TCOM':\n\t                    // song composers\n\t                    {\n\t                        if (!Array.isArray(frameValue)) {\n\t                            throw new Error(frameName + ' frame value should be an array of strings');\n\t                        }\n\t                        var artists = frameValue.map(function (artist) {\n\t                            return artist.toString();\n\t                        });\n\t                        var artistsStr = artistsToStr(artists);\n\t\n\t                        this._setStringFrame(frameName, artistsStr);\n\t                        break;\n\t                    }\n\t                case 'TCON':\n\t                    // song genre\n\t                    {\n\t                        if (!Array.isArray(frameValue)) {\n\t                            throw new Error(frameName + ' frame value should be an array of strings');\n\t                        }\n\t                        var frames = frameValue.map(function (frame) {\n\t                            return frame.toString();\n\t                        });\n\t                        var genresStr = genresToStr(frames);\n\t\n\t                        this._setStringFrame(frameName, genresStr);\n\t                        break;\n\t                    }\n\t                case 'TIT2': // song title\n\t                case 'TALB': // album title\n\t                case 'TPE2': // album artist // spec doesn't say anything about separator, so it is a string, not array\n\t                case 'TRCK': // song number in album: 5 or 5/10\n\t                case 'TPOS': // album disc number: 1 or 1/3\n\t                case 'TPUB':\n\t                    // label name\n\t                    {\n\t                        this._setStringFrame(frameName, frameValue);\n\t                        break;\n\t                    }\n\t                case 'TLEN': // song duration\n\t                case 'TYER':\n\t                    // album release year\n\t                    {\n\t                        this._setIntegerFrame(frameName, frameValue);\n\t                        break;\n\t                    }\n\t                case 'USLT':\n\t                    // unsychronised lyrics\n\t                    {\n\t                        this._setLyricsFrame(frameName, frameValue);\n\t                        break;\n\t                    }\n\t                case 'APIC':\n\t                    // song cover\n\t                    {\n\t                        if (frameValue.constructor !== ArrayBuffer) {\n\t                            throw new Error('APIC frame value should be an instance of ArrayBuffer');\n\t                        }\n\t                        this._setPictureFrame(frameName, frameValue);\n\t                        break;\n\t                    }\n\t                default:\n\t                    {\n\t                        throw new Error('Unsupported frame ' + frameName);\n\t                    }\n\t            }\n\t            return this;\n\t        }\n\t    }, {\n\t        key: 'removeTag',\n\t        value: function removeTag() {\n\t            var headerLength = 10;\n\t            var bufferLength = this.arrayBuffer.byteLength;\n\t\n\t            if (bufferLength < headerLength) {\n\t                return;\n\t            }\n\t            var firstTenBytes = new Uint8Array(this.arrayBuffer, 0, headerLength);\n\t            var isId3tag = firstTenBytes[0] === 0x49 && firstTenBytes[1] === 0x44 && firstTenBytes[2] === 0x33;\n\t\n\t            if (!isId3tag) {\n\t                return;\n\t            }\n\t            var version = firstTenBytes[3];\n\t\n\t            if (version < 2 || version > 4) {\n\t                return;\n\t            }\n\t            var tagSize = uint7ArrayToUint28([firstTenBytes[6], firstTenBytes[7], firstTenBytes[8], firstTenBytes[9]]);\n\t\n\t            this.arrayBuffer = this.arrayBuffer.slice(tagSize + headerLength);\n\t        }\n\t    }, {\n\t        key: 'addTag',\n\t        value: function addTag() {\n\t            this.removeTag(); // to be sure there is no other tags\n\t            var offset = 0;\n\t            var headerSize = 10;\n\t            var totalFrameSize = getTotalFrameSize(this.frames);\n\t            var totalTagSize = headerSize + totalFrameSize + this.padding;\n\t            var buffer = new ArrayBuffer(this.arrayBuffer.byteLength + totalTagSize);\n\t            var bufferWriter = new Uint8Array(buffer);\n\t            var coder8 = new TextEncoder('utf-8');\n\t            var coder16 = new TextEncoder('utf-16le');\n\t\n\t            var writeBytes = [0x49, 0x44, 0x33, 3]; // ID3 tag and version\n\t\n\t            bufferWriter.set(writeBytes, offset);\n\t            offset += writeBytes.length;\n\t\n\t            offset++; // version revision\n\t            offset++; // flags\n\t\n\t            writeBytes = uint28ToUint7Array(totalTagSize - headerSize); // tag size (without header)\n\t            bufferWriter.set(writeBytes, offset);\n\t            offset += writeBytes.length;\n\t\n\t            this.frames.forEach(function (frame) {\n\t                writeBytes = coder8.encode(frame.name); // frame name\n\t                bufferWriter.set(writeBytes, offset);\n\t                offset += writeBytes.length;\n\t\n\t                writeBytes = uint32ToUint8Array(frame.size - headerSize); // frame size (without header)\n\t                bufferWriter.set(writeBytes, offset);\n\t                offset += writeBytes.length;\n\t\n\t                offset += 2; // flags\n\t\n\t                switch (frame.name) {\n\t                    case 'TPE1':\n\t                    case 'TCOM':\n\t                    case 'TCON':\n\t                    case 'TIT2':\n\t                    case 'TALB':\n\t                    case 'TPE2':\n\t                    case 'TRCK':\n\t                    case 'TPOS':\n\t                    case 'TPUB':\n\t                        {\n\t                            writeBytes = [1, 0xff, 0xfe]; // encoding and BOM\n\t                            bufferWriter.set(writeBytes, offset);\n\t                            offset += writeBytes.length;\n\t\n\t                            writeBytes = coder16.encode(frame.value); // frame value\n\t                            bufferWriter.set(writeBytes, offset);\n\t                            offset += writeBytes.length;\n\t                            break;\n\t                        }\n\t                    case 'USLT':\n\t                        {\n\t                            var langEng = [101, 110, 103];\n\t\n\t                            writeBytes = [1].concat(langEng); // encoding and language\n\t                            bufferWriter.set(writeBytes, offset);\n\t                            offset += writeBytes.length;\n\t\n\t                            offset += 2; // content descriptor\n\t\n\t                            writeBytes = coder16.encode(frame.value); // frame value\n\t                            bufferWriter.set(writeBytes, offset);\n\t                            offset += writeBytes.length;\n\t                            break;\n\t                        }\n\t                    case 'TLEN':\n\t                    case 'TYER':\n\t                        {\n\t                            offset++; // encoding\n\t\n\t                            writeBytes = coder8.encode(frame.value); // frame value\n\t                            bufferWriter.set(writeBytes, offset);\n\t                            offset += writeBytes.length;\n\t                            break;\n\t                        }\n\t                    case 'APIC':\n\t                        {\n\t                            offset++; // encoding\n\t\n\t                            writeBytes = coder8.encode(frame.mimeType); // MIME type\n\t                            bufferWriter.set(writeBytes, offset);\n\t                            offset += writeBytes.length;\n\t\n\t                            writeBytes = [0, 3, 0]; // delemiter, pic type, delemiter\n\t                            bufferWriter.set(writeBytes, offset);\n\t                            offset += writeBytes.length;\n\t\n\t                            bufferWriter.set(new Uint8Array(frame.value), offset); // picture content\n\t                            offset += frame.value.byteLength;\n\t                            break;\n\t                        }\n\t                }\n\t            });\n\t\n\t            offset += this.padding; // free space for rewriting\n\t            bufferWriter.set(new Uint8Array(this.arrayBuffer), offset);\n\t            this.arrayBuffer = buffer;\n\t            return buffer;\n\t        }\n\t    }, {\n\t        key: 'getBlob',\n\t        value: function getBlob() {\n\t            return new Blob([this.arrayBuffer], { type: 'audio/mpeg' });\n\t        }\n\t    }, {\n\t        key: 'getURL',\n\t        value: function getURL() {\n\t            if (!this.url) {\n\t                this.url = URL.createObjectURL(this.getBlob());\n\t            }\n\t            return this.url;\n\t        }\n\t    }, {\n\t        key: 'revokeURL',\n\t        value: function revokeURL() {\n\t            URL.revokeObjectURL(this.url);\n\t        }\n\t    }]);\n\t\n\t    return Writer;\n\t}();\n\t\n\tmodule.exports = Writer;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** browser-id3-writer.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b359d158eb5d1f4a81cb\n **/","function uint32ToUint8Array(uint32) {\r\n    const uint8array = [];\r\n    const eightBitMask = (1 << 8) - 1;\r\n\r\n    for (let i = 24; i >= 0; i -= 8) {\r\n        uint8array.push((uint32 >>> i) & eightBitMask);\r\n    }\r\n    return uint8array;\r\n}\r\n\r\nfunction uint28ToUint7Array(uint28) {\r\n    const uint7array = [];\r\n    const sevenBitMask = (1 << 7) - 1;\r\n\r\n    for (let i = 21; i >= 0; i -= 7) {\r\n        uint7array.push((uint28 >>> i) & sevenBitMask);\r\n    }\r\n    return uint7array;\r\n}\r\n\r\nfunction uint7ArrayToUint28(uint7Array) {\r\n    let uint28 = 0;\r\n\r\n    for (let i = 0, pow = 21; pow >= 0; pow -= 7, i++) {\r\n        uint28 += uint7Array[i] << pow;\r\n    }\r\n    return uint28;\r\n}\r\n\r\nfunction artistsToStr(artists) {\r\n    return artists.join('/') || 'Unknown Artist';\r\n}\r\n\r\nfunction genresToStr(genres) {\r\n    // this delimiter works fine in Windows Explorer but nothing said about it in the spec\r\n    return genres.join(';');\r\n}\r\n\r\nfunction getTotalFrameSize(frames) {\r\n    let size = 0;\r\n\r\n    frames.forEach((frame) => {\r\n        size += frame.size;\r\n    });\r\n    return size;\r\n}\r\n\r\nfunction getNumericFrameSize(frameSize) {\r\n    const headerSize = 10;\r\n    const encodingSize = 1;\r\n\r\n    return headerSize + encodingSize + frameSize;\r\n}\r\n\r\nfunction getStringFrameSize(frameSize) {\r\n    const headerSize = 10;\r\n    const encodingSize = 1;\r\n    const bomSize = 2;\r\n    const frameUtf16Size = frameSize * 2;\r\n\r\n    return headerSize + encodingSize + bomSize + frameUtf16Size;\r\n}\r\n\r\nfunction getLyricsFrameSize(lyricsSize) {\r\n    const headerSize = 10;\r\n    const encodingSize = 1;\r\n    const languageSize = 3;\r\n    const contentDescriptorSize = 2;\r\n    const lyricsUtf16Size = lyricsSize * 2;\r\n\r\n    return headerSize + encodingSize + languageSize + contentDescriptorSize + lyricsUtf16Size;\r\n}\r\n\r\nfunction getPictureFrameSize(frameSize, mimeTypeSize) {\r\n    const headerSize = 10;\r\n    const encodingSize = 1;\r\n    const nullSize = 1;\r\n    const pictureTypeSize = 1;\r\n\r\n    return headerSize + encodingSize + mimeTypeSize + nullSize + pictureTypeSize + nullSize + frameSize;\r\n}\r\n\r\nfunction getBufferMimeType(buf) {\r\n    // https://github.com/sindresorhus/file-type\r\n    if (!buf || !buf.length) {\r\n        return null;\r\n    }\r\n    if (buf[0] === 0xff && buf[1] === 0xd8 && buf[2] === 0xff) {\r\n        return 'image/jpeg';\r\n    }\r\n    if (buf[0] === 0x89 && buf[1] === 0x50 && buf[2] === 0x4e && buf[3] === 0x47) {\r\n        return 'image/png';\r\n    }\r\n    if (buf[0] === 0x47 && buf[1] === 0x49 && buf[2] === 0x46) {\r\n        return 'image/gif';\r\n    }\r\n    if (buf[8] === 0x57 && buf[9] === 0x45 && buf[10] === 0x42 && buf[11] === 0x50) {\r\n        return 'image/webp';\r\n    }\r\n    const isLeTiff = buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0x2a && buf[3] === 0;\r\n    const isBeTiff = buf[0] === 0x4d && buf[1] === 0x4d && buf[2] === 0 && buf[3] === 0x2a;\r\n\r\n    if (isLeTiff || isBeTiff) {\r\n        return 'image/tiff';\r\n    }\r\n    if (buf[0] === 0x42 && buf[1] === 0x4d) {\r\n        return 'image/bmp';\r\n    }\r\n    if (buf[0] === 0 && buf[1] === 0 && buf[2] === 1 && buf[3] === 0) {\r\n        return 'image/x-icon';\r\n    }\r\n    return null;\r\n}\r\n\r\nclass Writer {\r\n\r\n    _setIntegerFrame(name, value) {\r\n        const integer = parseInt(value, 10);\r\n\r\n        this.frames.push({\r\n            name,\r\n            value: integer,\r\n            size: getNumericFrameSize(integer.toString().length)\r\n        });\r\n    }\r\n\r\n    _setStringFrame(name, value) {\r\n        const stringValue = value.toString();\r\n\r\n        this.frames.push({\r\n            name,\r\n            value: stringValue,\r\n            size: getStringFrameSize(stringValue.length)\r\n        });\r\n    }\r\n\r\n    _setPictureFrame(name, buffer) {\r\n        const mimeType = getBufferMimeType(new Uint8Array(buffer), 0, 12);\r\n\r\n        if (!mimeType) {\r\n            throw new Error('Unknown picture MIME type');\r\n        }\r\n        this.frames.push({\r\n            name,\r\n            value: buffer,\r\n            mimeType,\r\n            size: getPictureFrameSize(buffer.byteLength, mimeType.length)\r\n        });\r\n    }\r\n\r\n    _setLyricsFrame(name, lyrics) {\r\n        const stringValue = lyrics.toString();\r\n\r\n        this.frames.push({\r\n            name,\r\n            value: stringValue,\r\n            size: getLyricsFrameSize(stringValue.length)\r\n        });\r\n    }\r\n\r\n    constructor(buffer) {\r\n        if (!buffer || buffer.constructor !== ArrayBuffer) {\r\n            throw new Error('First argument should be an instance of ArrayBuffer');\r\n        }\r\n\r\n        const firstThreeBytes = new Uint8Array(buffer, 0, 3);\r\n        const isMp3File = firstThreeBytes[0] === 0xff && firstThreeBytes[1] === 0xfb;\r\n        const isMp3Id3File = firstThreeBytes[0] === 0x49 && firstThreeBytes[1] === 0x44 && firstThreeBytes[2] === 0x33;\r\n\r\n        if (!isMp3File && !isMp3Id3File) {\r\n            throw new Error('ArrayBuffer is not an mp3 file or it is corrupted');\r\n        }\r\n\r\n        this.arrayBuffer = buffer;\r\n        this.padding = 4096;\r\n        this.frames = [];\r\n        this.url = '';\r\n    }\r\n\r\n\r\n    setFrame(frameName, frameValue) {\r\n        switch (frameName) {\r\n            case 'TPE1': // song artists\r\n            case 'TCOM': // song composers\r\n            {\r\n                if (!Array.isArray(frameValue)) {\r\n                    throw new Error(`${frameName} frame value should be an array of strings`);\r\n                }\r\n                const artists = frameValue.map((artist) => artist.toString());\r\n                const artistsStr = artistsToStr(artists);\r\n\r\n                this._setStringFrame(frameName, artistsStr);\r\n                break;\r\n            }\r\n            case 'TCON': // song genre\r\n            {\r\n                if (!Array.isArray(frameValue)) {\r\n                    throw new Error(`${frameName} frame value should be an array of strings`);\r\n                }\r\n                const frames = frameValue.map((frame) => frame.toString());\r\n                const genresStr = genresToStr(frames);\r\n\r\n                this._setStringFrame(frameName, genresStr);\r\n                break;\r\n            }\r\n            case 'TIT2': // song title\r\n            case 'TALB': // album title\r\n            case 'TPE2': // album artist // spec doesn't say anything about separator, so it is a string, not array\r\n            case 'TRCK': // song number in album: 5 or 5/10\r\n            case 'TPOS': // album disc number: 1 or 1/3\r\n            case 'TPUB': // label name\r\n            {\r\n                this._setStringFrame(frameName, frameValue);\r\n                break;\r\n            }\r\n            case 'TLEN': // song duration\r\n            case 'TYER': // album release year\r\n            {\r\n                this._setIntegerFrame(frameName, frameValue);\r\n                break;\r\n            }\r\n            case 'USLT': // unsychronised lyrics\r\n            {\r\n                this._setLyricsFrame(frameName, frameValue);\r\n                break;\r\n            }\r\n            case 'APIC': // song cover\r\n            {\r\n                if (frameValue.constructor !== ArrayBuffer) {\r\n                    throw new Error('APIC frame value should be an instance of ArrayBuffer');\r\n                }\r\n                this._setPictureFrame(frameName, frameValue);\r\n                break;\r\n            }\r\n            default:\r\n            {\r\n                throw new Error(`Unsupported frame ${frameName}`);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    removeTag() {\r\n        const headerLength = 10;\r\n        const bufferLength = this.arrayBuffer.byteLength;\r\n\r\n        if (bufferLength < headerLength) {\r\n            return;\r\n        }\r\n        const firstTenBytes = new Uint8Array(this.arrayBuffer, 0, headerLength);\r\n        const isId3tag = firstTenBytes[0] === 0x49 && firstTenBytes[1] === 0x44 && firstTenBytes[2] === 0x33;\r\n\r\n        if (!isId3tag) {\r\n            return;\r\n        }\r\n        const version = firstTenBytes[3];\r\n\r\n        if (version < 2 || version > 4) {\r\n            return;\r\n        }\r\n        const tagSize = uint7ArrayToUint28([\r\n            firstTenBytes[6], firstTenBytes[7],\r\n            firstTenBytes[8], firstTenBytes[9]\r\n        ]);\r\n\r\n        this.arrayBuffer = this.arrayBuffer.slice(tagSize + headerLength);\r\n    }\r\n\r\n    addTag() {\r\n        this.removeTag(); // to be sure there is no other tags\r\n        let offset = 0;\r\n        const headerSize = 10;\r\n        const totalFrameSize = getTotalFrameSize(this.frames);\r\n        const totalTagSize = headerSize + totalFrameSize + this.padding;\r\n        const buffer = new ArrayBuffer(this.arrayBuffer.byteLength + totalTagSize);\r\n        const bufferWriter = new Uint8Array(buffer);\r\n        const coder8 = new TextEncoder('utf-8');\r\n        const coder16 = new TextEncoder('utf-16le');\r\n\r\n        let writeBytes = [0x49, 0x44, 0x33, 3]; // ID3 tag and version\r\n\r\n        bufferWriter.set(writeBytes, offset);\r\n        offset += writeBytes.length;\r\n\r\n        offset++; // version revision\r\n        offset++; // flags\r\n\r\n        writeBytes = uint28ToUint7Array(totalTagSize - headerSize); // tag size (without header)\r\n        bufferWriter.set(writeBytes, offset);\r\n        offset += writeBytes.length;\r\n\r\n        this.frames.forEach((frame) => {\r\n            writeBytes = coder8.encode(frame.name); // frame name\r\n            bufferWriter.set(writeBytes, offset);\r\n            offset += writeBytes.length;\r\n\r\n            writeBytes = uint32ToUint8Array(frame.size - headerSize); // frame size (without header)\r\n            bufferWriter.set(writeBytes, offset);\r\n            offset += writeBytes.length;\r\n\r\n            offset += 2; // flags\r\n\r\n            switch (frame.name) {\r\n                case 'TPE1':\r\n                case 'TCOM':\r\n                case 'TCON':\r\n                case 'TIT2':\r\n                case 'TALB':\r\n                case 'TPE2':\r\n                case 'TRCK':\r\n                case 'TPOS':\r\n                case 'TPUB':\r\n                {\r\n                    writeBytes = [1, 0xff, 0xfe]; // encoding and BOM\r\n                    bufferWriter.set(writeBytes, offset);\r\n                    offset += writeBytes.length;\r\n\r\n                    writeBytes = coder16.encode(frame.value); // frame value\r\n                    bufferWriter.set(writeBytes, offset);\r\n                    offset += writeBytes.length;\r\n                    break;\r\n                }\r\n                case 'USLT':\r\n                {\r\n                    const langEng = [101, 110, 103];\r\n\r\n                    writeBytes = [1].concat(langEng); // encoding and language\r\n                    bufferWriter.set(writeBytes, offset);\r\n                    offset += writeBytes.length;\r\n\r\n                    offset += 2; // content descriptor\r\n\r\n                    writeBytes = coder16.encode(frame.value); // frame value\r\n                    bufferWriter.set(writeBytes, offset);\r\n                    offset += writeBytes.length;\r\n                    break;\r\n                }\r\n                case 'TLEN':\r\n                case 'TYER':\r\n                {\r\n                    offset++; // encoding\r\n\r\n                    writeBytes = coder8.encode(frame.value); // frame value\r\n                    bufferWriter.set(writeBytes, offset);\r\n                    offset += writeBytes.length;\r\n                    break;\r\n                }\r\n                case 'APIC':\r\n                {\r\n                    offset++; // encoding\r\n\r\n                    writeBytes = coder8.encode(frame.mimeType); // MIME type\r\n                    bufferWriter.set(writeBytes, offset);\r\n                    offset += writeBytes.length;\r\n\r\n                    writeBytes = [0, 3, 0]; // delemiter, pic type, delemiter\r\n                    bufferWriter.set(writeBytes, offset);\r\n                    offset += writeBytes.length;\r\n\r\n                    bufferWriter.set(new Uint8Array(frame.value), offset); // picture content\r\n                    offset += frame.value.byteLength;\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n\r\n        offset += this.padding; // free space for rewriting\r\n        bufferWriter.set(new Uint8Array(this.arrayBuffer), offset);\r\n        this.arrayBuffer = buffer;\r\n        return buffer;\r\n    }\r\n\r\n    getBlob() {\r\n        return new Blob([this.arrayBuffer], {type: 'audio/mpeg'});\r\n    }\r\n\r\n    getURL() {\r\n        if (!this.url) {\r\n            this.url = URL.createObjectURL(this.getBlob());\r\n        }\r\n        return this.url;\r\n    }\r\n\r\n    revokeURL() {\r\n        URL.revokeObjectURL(this.url);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Writer;\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/browser-id3-writer.js\n **/"],"sourceRoot":""}